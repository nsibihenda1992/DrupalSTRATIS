<?php

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\user\Entity\User;



/**
 * Implements hook_theme().
 */
function stratis_theme($existing, $type, $theme, $path)
{
    $theme_path = drupal_get_path('theme', 'stratis');

    $themes['home_page']       = [
        'path'      => $theme_path . '/templates/page',
        'template'  => 'home-page',
        'variables' => [
            'content' => null,
        ],
    ];
    $themes['archive']       = [
        'path'      => $theme_path . '/templates/page',
        'template'  => 'home-page',
        'variables' => [
            'content' => null,
        ],
    ];
    $themes['side_block']       = [
        'path'      => $theme_path . '/templates/page',
        'template'  => 'side-block',
        'variables' => [
            'content' => null,
        ],
    ];
    $themes['about_page']       = [
        'path'      => $theme_path . '/templates/page',
        'template'  => 'about-page',
        'variables' => [
            'content' => null,
        ],
    ];
    $themes['contact_us']       = [
        'path'      => $theme_path . '/templates/page',
        'template'  => 'contact-us',
        'variables' => [
            'content' => null,
        ],
    ];
    return $themes;
}


/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function stratis_base_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables)
{
    /** @var \Drupal\taxonomy\TermInterface $term */
    $term = $variables['elements']['#taxonomy_term'];
    $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
    // Add view mode theme suggestions.
    $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
    $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
    $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_form_alter().
 */
function stratis_base_form_alter(&$form, $form_state, $form_id) {
    if($form_id == 'webform_submission_contact_add_form'){
        $form['elements']['name']['#theme_wrappers'] = [];
        $form['elements']['email']['#theme_wrappers'] = [];
        $form['elements']['phone']['#theme_wrappers'] = [];
        $form['elements']['city_name']['#theme_wrappers'] = [];
    }elseif($form_id == 'search_block_form') {
        $form['actions']['submit']['#value'] = '';
    }elseif($form_id == 'comment_post_comment_form') {
        $form['actions']['preview']['#access'] = FALSE;
        $form['actions']['submit']['#value'] = 'SEND';
    }
}



/**
 * Implements hook_preprocess_input__textfield().
 */
function stratis_base_preprocess_input__textfield(&$vars) {
   $vars['attributes']['placeholder'] = $vars['element']['#title'];
   $vars['title_display'] = 'hidden';
  }
/**
 * Implements hook_preprocess_input__email().
 */
function stratis_base_preprocess_input__email(&$vars) {
    $vars['attributes']['placeholder'] = $vars['element']['#title'];
    $vars['title_display'] = 'hidden';
}

/**
 * Implements hook_preprocess_textarea().
 */
function stratis_base_preprocess_textarea(&$vars) {
    $vars['attributes']['placeholder'] = $vars['element']['#title'];
    $vars['title_display'] = 'hidden';
}




/**
 * Implements hook_node_view().
 */
function stratis_base_taxonomy_term_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

    if($view_mode == 'full' && $entity->bundle() == 'categories') {

        $query = \Drupal::entityQuery('node');
        $query->sort('created' , 'DESC');
        $query->condition('field_category' , $entity->id());
        $query->condition('type', 'post');
        $nids = $query->execute();

        $node_storage = \Drupal::entityTypeManager()->getStorage('node');
        $nodes_posts = $node_storage->loadMultiple($nids);
        if($nodes_posts) {
          $view_builder = \Drupal::service('entity_type.manager')->getViewBuilder('node');
          $build['#content']['posts'] = $view_builder->viewMultiple($nodes_posts, 'teaser');
          $build['#cache']['max-age'] = 0;
        }
    }
}